{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Accueil Nom du projet TP2 - Application de gestion du volumes d'eau dans une baignoire \u00e0 l'aide des threads. Livrable \u00c0 rendre : une distribution source, une distribution binaire, une documentation compl\u00e8te. Description de l'application Ce projet correspond au TP2 r\u00e9alis\u00e9 lors du cours de programation objet avanc\u00e9e en Master 1 MIAGE. L'application permet \u00e0 partir de l'interface de : R\u00e9gler le volume initiale de la baignoire, R\u00e9gler le volume d'eau ajout\u00e9 (qteVerse), R\u00e9gler le vome d'eau retir\u00e9 (qteFuite). L'objectif \u00e9tant de calcul\u00e9 le temps que met une baignoire pour se remplir (le calcul a \u00e9t\u00e9 fait en secondes). Auteur Anne-Laure CHARLES - M1 MIAGE - Parcours Alternance","title":"Accueil"},{"location":"index.html#accueil","text":"","title":"Accueil"},{"location":"index.html#nom-du-projet","text":"TP2 - Application de gestion du volumes d'eau dans une baignoire \u00e0 l'aide des threads.","title":"Nom du projet"},{"location":"index.html#livrable","text":"\u00c0 rendre : une distribution source, une distribution binaire, une documentation compl\u00e8te.","title":"Livrable"},{"location":"index.html#description-de-lapplication","text":"Ce projet correspond au TP2 r\u00e9alis\u00e9 lors du cours de programation objet avanc\u00e9e en Master 1 MIAGE. L'application permet \u00e0 partir de l'interface de : R\u00e9gler le volume initiale de la baignoire, R\u00e9gler le volume d'eau ajout\u00e9 (qteVerse), R\u00e9gler le vome d'eau retir\u00e9 (qteFuite). L'objectif \u00e9tant de calcul\u00e9 le temps que met une baignoire pour se remplir (le calcul a \u00e9t\u00e9 fait en secondes).","title":"Description de l'application"},{"location":"index.html#auteur","text":"Anne-Laure CHARLES - M1 MIAGE - Parcours Alternance","title":"Auteur"},{"location":"installation.html","text":"\u00c9x\u00e9cuter l'application Pour executer le programme, il faut : Lancer un utilitaire de commandes : Sous Windows : une invite de commandes Sous Linux/Unix/Mac : un terminal \u00c0 l'aide de la commande cd , rendez-vous dans le r\u00e9pertoire o\u00f9 se trouve le .bat , ou ouvrez directement l'utilitaire dans le r\u00e9pertoire, Executer la commande app.bat , la fen\u00eatre de l'application s'ouvrira.","title":"Installation"},{"location":"installation.html#executer-lapplication","text":"Pour executer le programme, il faut : Lancer un utilitaire de commandes : Sous Windows : une invite de commandes Sous Linux/Unix/Mac : un terminal \u00c0 l'aide de la commande cd , rendez-vous dans le r\u00e9pertoire o\u00f9 se trouve le .bat , ou ouvrez directement l'utilitaire dans le r\u00e9pertoire, Executer la commande app.bat , la fen\u00eatre de l'application s'ouvrira.","title":"\u00c9x\u00e9cuter l'application"},{"location":"licences.html","text":"Licences Ce projet est distribu\u00e9 sous licence UNLICENCE. Ressources et sources utilis\u00e9es pour la documentation MkDocs D\u00e9buter avec MkDocs : source. Configuration de la documentation : source. Maven Configuration de la documentation : source.","title":"Licences"},{"location":"licences.html#licences","text":"Ce projet est distribu\u00e9 sous licence UNLICENCE.","title":"Licences"},{"location":"licences.html#ressources-et-sources-utilisees-pour-la-documentation","text":"","title":"Ressources et sources utilis\u00e9es pour la documentation"},{"location":"licences.html#mkdocs","text":"D\u00e9buter avec MkDocs : source. Configuration de la documentation : source.","title":"MkDocs"},{"location":"licences.html#maven","text":"Configuration de la documentation : source.","title":"Maven"},{"location":"manuelTech.html","text":"La documentation technique: Les outils : Pour ce projet j'ai travaill\u00e9 avec les outils suivants : Scene Builder :outil permettant de r\u00e9aliser des interfaces JavaFX (version 8). Eclipse : IDE pour la programmation Java (jdk 1.8_0241). Maven & les plugins n\u00e9cessaires pour g\u00e9n\u00e9rer les fichiers archives et le fichier binaire (inclus avec cette documentation). ObjeAid UML Diagramm : est un outil permettant de cr\u00e9er des diagrammes \u00e0 partir d'Eclipse. Le diagramme de classe : Explications Dans le diagramme, il y a les relations suivantes : Entre App et l'interface : relation de type access, car la classe permet d'afficher et d'acc\u00e9der \u00e0 l'interface graphique, Entre App et le package Application : relation de type import, car c'est gr\u00e2ce \u00e0 ce package que l'on peut initialiser la fen\u00eatre et la lancer, Entre App et Controller : une simple association, Controller et Log : relation de type use, car la classe Controller ce que contient la classe Log (Instance de Log dans la classe Controller), Controller et Session : relation de type use car utilise List , Controller et InfosPerso : relation de type use car utilise List , Entre Log et Session : relation de type association, un ou plusieurs logs correspondent \u00e0 une seule et m\u00eame session, Entre Session et InfosPerso : relation de type association, un utilisateur peut compter 0 ou plusieurs sessions (0 car il se peut qu'en fonction des dates, l'utilisateur ne se soit pas connect\u00e9). Les classes : Pour ce TP, j'ai travaill\u00e9 avec l'interface Callable permettant de faire du multithread. App.java Cette classe est la classe principale permettant de lancer l'interface (Baignoire.fxml). Il y a deux m\u00e9thodes : start() : permettant de charger le fichier .fxml , de modifier le titre de la fen\u00eatre (setTitle()), de sp\u00e9cifier le sc\u00e8ne qui va \u00eatre utilis\u00e9 (setScene()), d'afficher la sc\u00e8ne (commande show()). main() : qui permet de charger la fen\u00eatre avec la commande launch(args) . Controller.java initialize() : est la fonction qui s'ex\u00e9cute lorsque la fen\u00e8tre FXML se cr\u00e9\u00e9e. start(ActionEvent e) : est la fonction qui s'ex\u00e9cute lorsque l'on clique sur le bouton \"D\u00e9marrer\". On cr\u00e9e une nouvelle instance de la classe Baignoire nomm\u00e9e baignoire. \u00c0 l'aide de cette objet Baignoire, on va cr\u00e9er 3 threads qui vont prendre cet objet en param\u00e8tres (les param\u00e8tres de la baignoire sont r\u00e9cup\u00e9r\u00e9es via les sliders) et \u00e0 l'aide de l'interface CompletionService, on va ex\u00e9cuter ces threads en diff\u00e9rer et r\u00e9cup\u00e9rer leurs r\u00e9sultats. remplir() (FXML) : est la fonction qui permet de modifier la quantit\u00e9 d'eau fuit\u00e9e \u00e0 l'aide du slider d\u00e9di\u00e9e.La quantit\u00e9 est affich\u00e9e dans un texte \u00e0 l'aide de la m\u00e9thode setText() . vider() (FXML) : est la fonction qui permet de modifier la quantit\u00e9 d'eau vers\u00e9e \u00e0 l'aide du slider d\u00e9di\u00e9e.La quantit\u00e9 est affich\u00e9e dans un texte \u00e0 l'aide de la m\u00e9thode setText() . Baignoire.java La classe Baignoire contient 6 param\u00e8tres : * volume (float), * qteEauTot (float), * qteVerse (float), * qteFuite (float), * semaphore (classe Semaphore), * un \u00e9l\u00e9ment log (classe Logger) pour les messages d'erreur. On y a cr\u00e9e le constructeur, les getters et setters ainsi que la m\u00e9thode toString(); estVide() : retourne true si la baignoire est vide. estPlein() : retourne true si la baignoire est vide. remplir() : est une fonction qui permet de remplir la baignoire en v\u00e9rifiant si la quantit\u00e9 d'eau actuelle de la baignoire additionn\u00e9e \u00e0 la quantit\u00e9 vers\u00e9e est inf\u00e9rieure ou \u00e9gale au volume (le volume \u00e9tant la quantit\u00e9 \u00e0 atteindre pour que la baignoire soit remplie) alors on incr\u00e9mente la quantit\u00e9 d'eau. vider() : est une fonction qui permet de vider la baignoire en v\u00e9rifiant si la quantit\u00e9 d'eau actuelle de la baignoire additionn\u00e9e \u00e0 la quantit\u00e9 fuit\u00e9e est inf\u00e9rieure ou \u00e9gale \u00e0 0 (on ne peut pas avoir un volume d'eau n\u00e9gatif) alors on soustrait la quantit\u00e9 d'eau. TableauDeBord.java call() : est une m\u00e9thode appel\u00e9e afin d'\u00e9x\u00e9cuter une t\u00e2che asynchrone, elle retourne un r\u00e9sultat, en cas d'\u00e9chec de la t\u00e2che, elle renvoie une exception (throws Exception). Dans la classe TableauDeBord, on calcule dans la m\u00e9thode call le temps que la baignoire met \u00e0 se remplir et la barre de progression montre l'\u00e9volution du volume de l'eau dans la baignoire. convertDuree() : permet retourner la dur\u00e9e calcul\u00e9e en minutes et secondes. RemplissageBaignoire.java call () m\u00eame fonctionnement que expliquer plus haut , elle boucle tant que la baignoire ne s'est pas remplie totalement et remplira la baignoire en fonction de la quantit\u00e9 saisie avec le slider. VidageBaignoire.java call () m\u00eame fonctionnement que expliquer plus haut , elle boucle tant que la baignoire ne s'est pas remplie totalement et videra la baignoire en fonction de la quantit\u00e9 saisie avec le slider. Baignoire.fxml Contient tous les \u00e9l\u00e9ments de la fen\u00eatre (progressBar, Button, Text, Slider), avec leurs id fxml, leurs positions, les noms et les actions (onAction pour le bouton D\u00e9marrer ). Le POM XML Le pom.xml contient le mod\u00e8le objet pour ce projet. Il contient toutes les informations importantes sur ce projet. Il permet de r\u00e9f\u00e9rencer le groupId, artifactId, version, nom, description, etc. Mais \u00e9galement d'y ajouter des plugins et d\u00e9pendances pour compiler les ressources du projet permettant d'obtenir le .bat ou encore la possibilit\u00e9 de g\u00e9n\u00e9rer des archives (.zip,.rar) avec un .Jar .","title":"Manuel technique"},{"location":"manuelTech.html#la-documentation-technique","text":"","title":"La documentation technique:"},{"location":"manuelTech.html#les-outils","text":"Pour ce projet j'ai travaill\u00e9 avec les outils suivants : Scene Builder :outil permettant de r\u00e9aliser des interfaces JavaFX (version 8). Eclipse : IDE pour la programmation Java (jdk 1.8_0241). Maven & les plugins n\u00e9cessaires pour g\u00e9n\u00e9rer les fichiers archives et le fichier binaire (inclus avec cette documentation). ObjeAid UML Diagramm : est un outil permettant de cr\u00e9er des diagrammes \u00e0 partir d'Eclipse.","title":"Les outils :"},{"location":"manuelTech.html#le-diagramme-de-classe","text":"","title":"Le diagramme de classe :"},{"location":"manuelTech.html#explications","text":"Dans le diagramme, il y a les relations suivantes : Entre App et l'interface : relation de type access, car la classe permet d'afficher et d'acc\u00e9der \u00e0 l'interface graphique, Entre App et le package Application : relation de type import, car c'est gr\u00e2ce \u00e0 ce package que l'on peut initialiser la fen\u00eatre et la lancer, Entre App et Controller : une simple association, Controller et Log : relation de type use, car la classe Controller ce que contient la classe Log (Instance de Log dans la classe Controller), Controller et Session : relation de type use car utilise List , Controller et InfosPerso : relation de type use car utilise List , Entre Log et Session : relation de type association, un ou plusieurs logs correspondent \u00e0 une seule et m\u00eame session, Entre Session et InfosPerso : relation de type association, un utilisateur peut compter 0 ou plusieurs sessions (0 car il se peut qu'en fonction des dates, l'utilisateur ne se soit pas connect\u00e9).","title":"Explications"},{"location":"manuelTech.html#les-classes","text":"Pour ce TP, j'ai travaill\u00e9 avec l'interface Callable permettant de faire du multithread.","title":"Les classes :"},{"location":"manuelTech.html#appjava","text":"Cette classe est la classe principale permettant de lancer l'interface (Baignoire.fxml). Il y a deux m\u00e9thodes : start() : permettant de charger le fichier .fxml , de modifier le titre de la fen\u00eatre (setTitle()), de sp\u00e9cifier le sc\u00e8ne qui va \u00eatre utilis\u00e9 (setScene()), d'afficher la sc\u00e8ne (commande show()). main() : qui permet de charger la fen\u00eatre avec la commande launch(args) .","title":"App.java"},{"location":"manuelTech.html#controllerjava","text":"initialize() : est la fonction qui s'ex\u00e9cute lorsque la fen\u00e8tre FXML se cr\u00e9\u00e9e. start(ActionEvent e) : est la fonction qui s'ex\u00e9cute lorsque l'on clique sur le bouton \"D\u00e9marrer\". On cr\u00e9e une nouvelle instance de la classe Baignoire nomm\u00e9e baignoire. \u00c0 l'aide de cette objet Baignoire, on va cr\u00e9er 3 threads qui vont prendre cet objet en param\u00e8tres (les param\u00e8tres de la baignoire sont r\u00e9cup\u00e9r\u00e9es via les sliders) et \u00e0 l'aide de l'interface CompletionService, on va ex\u00e9cuter ces threads en diff\u00e9rer et r\u00e9cup\u00e9rer leurs r\u00e9sultats. remplir() (FXML) : est la fonction qui permet de modifier la quantit\u00e9 d'eau fuit\u00e9e \u00e0 l'aide du slider d\u00e9di\u00e9e.La quantit\u00e9 est affich\u00e9e dans un texte \u00e0 l'aide de la m\u00e9thode setText() . vider() (FXML) : est la fonction qui permet de modifier la quantit\u00e9 d'eau vers\u00e9e \u00e0 l'aide du slider d\u00e9di\u00e9e.La quantit\u00e9 est affich\u00e9e dans un texte \u00e0 l'aide de la m\u00e9thode setText() .","title":"Controller.java"},{"location":"manuelTech.html#baignoirejava","text":"La classe Baignoire contient 6 param\u00e8tres : * volume (float), * qteEauTot (float), * qteVerse (float), * qteFuite (float), * semaphore (classe Semaphore), * un \u00e9l\u00e9ment log (classe Logger) pour les messages d'erreur. On y a cr\u00e9e le constructeur, les getters et setters ainsi que la m\u00e9thode toString(); estVide() : retourne true si la baignoire est vide. estPlein() : retourne true si la baignoire est vide. remplir() : est une fonction qui permet de remplir la baignoire en v\u00e9rifiant si la quantit\u00e9 d'eau actuelle de la baignoire additionn\u00e9e \u00e0 la quantit\u00e9 vers\u00e9e est inf\u00e9rieure ou \u00e9gale au volume (le volume \u00e9tant la quantit\u00e9 \u00e0 atteindre pour que la baignoire soit remplie) alors on incr\u00e9mente la quantit\u00e9 d'eau. vider() : est une fonction qui permet de vider la baignoire en v\u00e9rifiant si la quantit\u00e9 d'eau actuelle de la baignoire additionn\u00e9e \u00e0 la quantit\u00e9 fuit\u00e9e est inf\u00e9rieure ou \u00e9gale \u00e0 0 (on ne peut pas avoir un volume d'eau n\u00e9gatif) alors on soustrait la quantit\u00e9 d'eau.","title":"Baignoire.java"},{"location":"manuelTech.html#tableaudebordjava","text":"call() : est une m\u00e9thode appel\u00e9e afin d'\u00e9x\u00e9cuter une t\u00e2che asynchrone, elle retourne un r\u00e9sultat, en cas d'\u00e9chec de la t\u00e2che, elle renvoie une exception (throws Exception). Dans la classe TableauDeBord, on calcule dans la m\u00e9thode call le temps que la baignoire met \u00e0 se remplir et la barre de progression montre l'\u00e9volution du volume de l'eau dans la baignoire. convertDuree() : permet retourner la dur\u00e9e calcul\u00e9e en minutes et secondes.","title":"TableauDeBord.java"},{"location":"manuelTech.html#remplissagebaignoirejava","text":"call () m\u00eame fonctionnement que expliquer plus haut , elle boucle tant que la baignoire ne s'est pas remplie totalement et remplira la baignoire en fonction de la quantit\u00e9 saisie avec le slider.","title":"RemplissageBaignoire.java"},{"location":"manuelTech.html#vidagebaignoirejava","text":"call () m\u00eame fonctionnement que expliquer plus haut , elle boucle tant que la baignoire ne s'est pas remplie totalement et videra la baignoire en fonction de la quantit\u00e9 saisie avec le slider.","title":"VidageBaignoire.java"},{"location":"manuelTech.html#baignoirefxml","text":"Contient tous les \u00e9l\u00e9ments de la fen\u00eatre (progressBar, Button, Text, Slider), avec leurs id fxml, leurs positions, les noms et les actions (onAction pour le bouton D\u00e9marrer ).","title":"Baignoire.fxml"},{"location":"manuelTech.html#le-pom-xml","text":"Le pom.xml contient le mod\u00e8le objet pour ce projet. Il contient toutes les informations importantes sur ce projet. Il permet de r\u00e9f\u00e9rencer le groupId, artifactId, version, nom, description, etc. Mais \u00e9galement d'y ajouter des plugins et d\u00e9pendances pour compiler les ressources du projet permettant d'obtenir le .bat ou encore la possibilit\u00e9 de g\u00e9n\u00e9rer des archives (.zip,.rar) avec un .Jar .","title":"Le POM XML"},{"location":"manuelUt.html","text":"Liste des Fonctionnalit\u00e9s Interface de la baignoire 1) R\u00e9gler le volume totale de la baignoire : Le premier slider (barre gradu\u00e9e) permet de d\u00e9finir le volume initiale contenu dans la baignoire. 2) Lancement du test : Vous pouvez choisir d'initier le taux de fuite et le taux de remplissage avant de cliquer sur le bouton d\u00e9marrer. Jauge de remplissage : Jauge de vidage : Et c'est parti ! Une fois que vous avez cliqu\u00e9 sur le bouton \"D\u00e9marrer\", celui ci ainsi que la barre de progression (progressBar) du volume totale ne sont plus modifiables. Vous pouvez vous amusez \u00e0 r\u00e9gler le d\u00e9bit d'eau entrant (remplissage) et le d\u00e9bit d'eau qui en fuit (vidage) dans la baignoire. Lorsque vous commencez, un message vous indique que votre baignoire est vide et lorsque vous cliquez sur D\u00e9marrer , un chronom\u00e8tre appara\u00eet. En fonction de comment vous dosez, le nombre de secondes augmentera, tandis que si vous ne saisissez pas de volume d'eau fuit\u00e9e, vous aurez une baignoire qui se remplira en un \u00e9clair ! Un fois termin\u00e9e, vous aurez un message pour vous indiquer en combien de minutes et de secondes la baignoire s'est remplie. Exemple :","title":"Manuel d'utilisiation"},{"location":"manuelUt.html#liste-des-fonctionnalites","text":"","title":"Liste des Fonctionnalit\u00e9s"},{"location":"manuelUt.html#interface-de-la-baignoire","text":"","title":"Interface de la baignoire"},{"location":"manuelUt.html#1-regler-le-volume-totale-de-la-baignoire","text":"Le premier slider (barre gradu\u00e9e) permet de d\u00e9finir le volume initiale contenu dans la baignoire.","title":"1) R\u00e9gler le volume totale de la baignoire :"},{"location":"manuelUt.html#2-lancement-du-test","text":"Vous pouvez choisir d'initier le taux de fuite et le taux de remplissage avant de cliquer sur le bouton d\u00e9marrer.","title":"2) Lancement du test :"},{"location":"manuelUt.html#jauge-de-remplissage","text":"","title":"Jauge de remplissage :"},{"location":"manuelUt.html#jauge-de-vidage","text":"","title":"Jauge de vidage :"},{"location":"manuelUt.html#et-cest-parti","text":"Une fois que vous avez cliqu\u00e9 sur le bouton \"D\u00e9marrer\", celui ci ainsi que la barre de progression (progressBar) du volume totale ne sont plus modifiables. Vous pouvez vous amusez \u00e0 r\u00e9gler le d\u00e9bit d'eau entrant (remplissage) et le d\u00e9bit d'eau qui en fuit (vidage) dans la baignoire. Lorsque vous commencez, un message vous indique que votre baignoire est vide et lorsque vous cliquez sur D\u00e9marrer , un chronom\u00e8tre appara\u00eet. En fonction de comment vous dosez, le nombre de secondes augmentera, tandis que si vous ne saisissez pas de volume d'eau fuit\u00e9e, vous aurez une baignoire qui se remplira en un \u00e9clair ! Un fois termin\u00e9e, vous aurez un message pour vous indiquer en combien de minutes et de secondes la baignoire s'est remplie.","title":"Et c'est parti !"},{"location":"manuelUt.html#exemple","text":"","title":"Exemple :"},{"location":"tests.html","text":"Les tests unitaires n'ont pas encore \u00e9t\u00e9 abord\u00e9s durant le Master MIAGE \u00e0 ce jour.","title":"Tests"}]}