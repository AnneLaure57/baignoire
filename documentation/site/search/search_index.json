{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Accueil Nom du projet TP2 - Application de gestion du volumes d'eau dans une baignoire \u00e0 l'aide des threads. Livrable \u00c0 rendre : une distribution source, une distribution binaire, une documentation compl\u00e8te. Description de l'application Ce projet correspond au TP2 r\u00e9alis\u00e9 lors du cours de programation objet avanc\u00e9e en Master 1 MIAGE. L'application permet \u00e0 partir de l'interface interactive (con\u00e7ue en JAVA FX) de : R\u00e9gler le volume initiale de la baignoire, R\u00e9gler le volume d'eau ajout\u00e9 (qteVerse), R\u00e9gler le vome d'eau retir\u00e9 (qteFuite). L'objectif \u00e9tant de calculer le temps que met une baignoire pour se remplir (le calcul a \u00e9t\u00e9 fait en minutes et en secondes). Auteur Anne-Laure CHARLES - M1 MIAGE - Parcours Alternance","title":"Accueil"},{"location":"index.html#accueil","text":"","title":"Accueil"},{"location":"index.html#nom-du-projet","text":"TP2 - Application de gestion du volumes d'eau dans une baignoire \u00e0 l'aide des threads.","title":"Nom du projet"},{"location":"index.html#livrable","text":"\u00c0 rendre : une distribution source, une distribution binaire, une documentation compl\u00e8te.","title":"Livrable"},{"location":"index.html#description-de-lapplication","text":"Ce projet correspond au TP2 r\u00e9alis\u00e9 lors du cours de programation objet avanc\u00e9e en Master 1 MIAGE. L'application permet \u00e0 partir de l'interface interactive (con\u00e7ue en JAVA FX) de : R\u00e9gler le volume initiale de la baignoire, R\u00e9gler le volume d'eau ajout\u00e9 (qteVerse), R\u00e9gler le vome d'eau retir\u00e9 (qteFuite). L'objectif \u00e9tant de calculer le temps que met une baignoire pour se remplir (le calcul a \u00e9t\u00e9 fait en minutes et en secondes).","title":"Description de l'application"},{"location":"index.html#auteur","text":"Anne-Laure CHARLES - M1 MIAGE - Parcours Alternance","title":"Auteur"},{"location":"installation.html","text":"\u00c9x\u00e9cuter l'application Pr\u00e9-requis Pour pouvoir utiliser cette application, que vous soyez sur Linux, MAC OS ou Windows, vous devez installer ou poss\u00e9der JAVA JDK8 . Distribution source Il faut t\u00e9l\u00e9charger la distrubution source qui a \u00e9t\u00e9 d\u00e9pos\u00e9 sur Arche TP2-CHARLES-0.0.1-SNAPSHOT-project.zip. Voici l'arborescence du projet, une fois d\u00e9zipp\u00e9 : Arborescence scripts/bin : contient les fichiers ex\u00e9cutables (distribution binaire) ; src/main/java/fr/ul/miage/ : contient le code Java (voir Manuel technique). Executer le programme Lancer un utilitaire de commandes : Sous Windows : une invite de commandes Sous Linux/Unix/Mac : un terminal \u00c0 l'aide de la commande cd , rendez-vous dans le r\u00e9pertoire o\u00f9 se trouve le .bat , ou ouvrez directement l'utilitaire dans le r\u00e9pertoire, Executer la commande app.bat sous Windows, la fen\u00eatre de l'application s'ouvrira. Executer la commande la commande java -jar avec le .jar sous Linux/Mac OS, la fen\u00eatre de l'application s'ouvrira. D\u00e9monstration Sur Windows : Ouverture de l'application : Vous pouvez \u00e9galement (marche en tout cas sur Windows), double-cliquez sur le fichier app.bat , l'application s'ouvrira. Sur Linux/Mac OS: Ex\u00e9cuter le fichier app avec la commande sh Ouverture de l'application : Ex\u00e9cuter le .jar Ouverture de l'application : En cas de probl\u00e8me : Si vous \u00eates un utilisateur Mac ou Linux, v\u00e9rifier que vous avez bien les droits sur le fichier pour le lancer. Voici un lien qui explique comment le faire pour : MAC Pour Mac : Solution Mac LINUX Pour Linux : Solution LINUX","title":"Installation"},{"location":"installation.html#executer-lapplication","text":"","title":"\u00c9x\u00e9cuter l'application"},{"location":"installation.html#pre-requis","text":"Pour pouvoir utiliser cette application, que vous soyez sur Linux, MAC OS ou Windows, vous devez installer ou poss\u00e9der JAVA JDK8 .","title":"Pr\u00e9-requis"},{"location":"installation.html#distribution-source","text":"Il faut t\u00e9l\u00e9charger la distrubution source qui a \u00e9t\u00e9 d\u00e9pos\u00e9 sur Arche TP2-CHARLES-0.0.1-SNAPSHOT-project.zip. Voici l'arborescence du projet, une fois d\u00e9zipp\u00e9 :","title":"Distribution source"},{"location":"installation.html#arborescence","text":"scripts/bin : contient les fichiers ex\u00e9cutables (distribution binaire) ; src/main/java/fr/ul/miage/ : contient le code Java (voir Manuel technique).","title":"Arborescence"},{"location":"installation.html#executer-le-programme","text":"Lancer un utilitaire de commandes : Sous Windows : une invite de commandes Sous Linux/Unix/Mac : un terminal \u00c0 l'aide de la commande cd , rendez-vous dans le r\u00e9pertoire o\u00f9 se trouve le .bat , ou ouvrez directement l'utilitaire dans le r\u00e9pertoire, Executer la commande app.bat sous Windows, la fen\u00eatre de l'application s'ouvrira. Executer la commande la commande java -jar avec le .jar sous Linux/Mac OS, la fen\u00eatre de l'application s'ouvrira.","title":"Executer le programme"},{"location":"installation.html#demonstration","text":"","title":"D\u00e9monstration"},{"location":"installation.html#sur-windows","text":"Ouverture de l'application : Vous pouvez \u00e9galement (marche en tout cas sur Windows), double-cliquez sur le fichier app.bat , l'application s'ouvrira.","title":"Sur Windows :"},{"location":"installation.html#sur-linuxmac-os","text":"","title":"Sur Linux/Mac OS:"},{"location":"installation.html#executer-le-fichier-app-avec-la-commande-sh","text":"Ouverture de l'application :","title":"Ex\u00e9cuter le fichier app avec la commande sh"},{"location":"installation.html#executer-le-jar","text":"Ouverture de l'application :","title":"Ex\u00e9cuter le .jar"},{"location":"installation.html#en-cas-de-probleme","text":"Si vous \u00eates un utilisateur Mac ou Linux, v\u00e9rifier que vous avez bien les droits sur le fichier pour le lancer. Voici un lien qui explique comment le faire pour :","title":"En cas de probl\u00e8me :"},{"location":"installation.html#mac","text":"Pour Mac : Solution Mac","title":"MAC"},{"location":"installation.html#linux","text":"Pour Linux : Solution LINUX","title":"LINUX"},{"location":"licences.html","text":"Licences Ce projet est distribu\u00e9 sous licence UNLICENCE. Ressources et sources utilis\u00e9es pour la documentation MkDocs D\u00e9buter avec MkDocs : source. Configuration de la documentation : source. Maven Configuration de la documentation : source.","title":"Licences"},{"location":"licences.html#licences","text":"Ce projet est distribu\u00e9 sous licence UNLICENCE.","title":"Licences"},{"location":"licences.html#ressources-et-sources-utilisees-pour-la-documentation","text":"","title":"Ressources et sources utilis\u00e9es pour la documentation"},{"location":"licences.html#mkdocs","text":"D\u00e9buter avec MkDocs : source. Configuration de la documentation : source.","title":"MkDocs"},{"location":"licences.html#maven","text":"Configuration de la documentation : source.","title":"Maven"},{"location":"manuelTech.html","text":"La documentation technique: Les outils : Pour ce projet j'ai travaill\u00e9 avec les outils suivants : Scene Builder :outil permettant de r\u00e9aliser des interfaces JavaFX (version 8). Eclipse : IDE pour la programmation Java (jdk 1.8_0241). Maven & les plugins n\u00e9cessaires pour g\u00e9n\u00e9rer les fichiers archives et le fichier binaire (inclus avec cette documentation). ObjeAid UML Diagramm : est un outil permettant de cr\u00e9er des diagrammes \u00e0 partir d'Eclipse. Le diagramme de classe : Explications Dans le diagramme, il y a les relations suivantes : Les classes tableauDeBord, VidageBaignoire et RemplissageBaignoire impl\u00e9mentent l'interface Callable, Controller et Baignoire : relation associative entre les deux classes (Instance de Baignoire dans la classe Controller), VidageBaignoire et Baignoire : relation associative entre les deux classes (utilis\u00e9e dans le constructeur), RemplissageBaignoire et Baignoire : relation associative entre les deux classes (utilis\u00e9e dans le constructeur), RemplissageBaignoire et Baignoire : relation associative entre les deux classes (utilis\u00e9e l'objet de la bagnoire afin de simuler l'\u00e9tat de la baignoire), Controller et Log : relation de type use, car la classe Controller ce que contient la classe Log (Instance de Log dans la classe Controller), Relations de d\u00e9pendances entre Controller et les classes TableauDeBord, VidageBaignoire, RemplissageBaignoire. Les classes : Pour ce TP, j'ai travaill\u00e9 avec l'interface Callable permettant de faire du multithread. App.java Cette classe est la classe principale permettant de lancer l'interface (Baignoire.fxml). Il y a deux m\u00e9thodes : start() : permettant de charger le fichier .fxml , de modifier le titre de la fen\u00eatre (setTitle()), de sp\u00e9cifier le sc\u00e8ne qui va \u00eatre utilis\u00e9 (setScene()), d'afficher la sc\u00e8ne (commande show()). La taille de la fen\u00eatre n'est pas modifiable (avec setResizable()), ceci \u00e9vitant de modifier la taille de la fen\u00eatre et l'affichage a \u00e9t\u00e9 r\u00e9alis\u00e9 de la mani\u00e8re la plus simple possible afin de pouvoir l'afficher sur tous les types d'\u00e9cran (15 pouces, 17 pouces, 19 pouces et inf\u00e9rieur). main() : qui permet de charger la fen\u00eatre avec la commande launch(args) . Baignoire.java La classe Baignoire contient 6 param\u00e8tres : * volume (float), * qteEauTot (float), * qteVerse (float), * qteFuite (float), * semaphore (classe Semaphore), * un \u00e9l\u00e9ment log (classe Logger) pour les messages d'erreur. Diff\u00e9rence entre volume et qteEauTot, le volume est d\u00e9finie avec le premier slider, qui d\u00e9finit le volume \u00e0 atteindre afin de remplir la baignoire, en d'autre termes, il s'agit du volume d'eau de la baignoire (ex : 250L). Tandis que la qteEauTot, correspond \u00e0 la quantit\u00e9 d'eau se trouvant actuellement dans la baignoire qui varie en fonction de la quantit\u00e9 d'eau vers\u00e9e (qteVerse) et la quantit\u00e9 d'eau qui fuit (qteFuite). On y a cr\u00e9e le constructeur, les getters et setters ainsi que la m\u00e9thode toString(); estPlein() : retourne true si la baignoire est pleine, on v\u00e9rifie si la quantit\u00e9 d'eau contenue dans la baignoire est \u00e9gale au volume de la baignorie. remplir() : est une fonction qui permet de remplir la baignoire en v\u00e9rifiant si la quantit\u00e9 d'eau actuelle de la baignoire additionn\u00e9e \u00e0 la quantit\u00e9 vers\u00e9e est inf\u00e9rieure ou \u00e9gale au volume (le volume \u00e9tant la quantit\u00e9 \u00e0 atteindre pour que la baignoire soit remplie) alors on incr\u00e9mente la quantit\u00e9 d'eau. vider() : est une fonction qui permet de vider la baignoire en v\u00e9rifiant si la quantit\u00e9 d'eau actuelle de la baignoire additionn\u00e9e \u00e0 la quantit\u00e9 fuit\u00e9e est inf\u00e9rieure ou \u00e9gale \u00e0 0 (on ne peut pas avoir un volume d'eau n\u00e9gatif) alors on soustrait la quantit\u00e9 d'eau. Informations compl\u00e9mentaires : acquire() : demande une ou plusieurs autorisations. Cette m\u00e9thode est dites bloquante, c'est \u00e0 dire, qu'elle ne rend la main que lorsque le nombre d'autorisations demand\u00e9 est disponible, auquel cas, elle renvoie une exception InterruptedException si le thread est interrompu. release() : est une m\u00e9thode qui permet de rendre une autorisation. Ces deux m\u00e9thodes sont utilis\u00e9s dans les setters setVolume() , setQteVerse , setQteFuite , afin de pouvoir modifier le volume de la baignoire et les quantit\u00e9s d'eau vers\u00e9e et de fuite. Controller.java initialize() : est la fonction qui s'ex\u00e9cute lorsque la fen\u00e8tre FXML se cr\u00e9\u00e9e. Lors de l'initialisation, on affiche le contenu des textes time et res avec la m\u00e9thode setDisable() et on modifie le contenu avec la m\u00e9thode setText() . start(ActionEvent e) : est la fonction qui s'ex\u00e9cute lorsque l'on clique sur le bouton \"D\u00e9marrer\". On cr\u00e9e une nouvelle instance de la classe Baignoire nomm\u00e9e baignoire. \u00c0 l'aide de cette objet Baignoire, on va cr\u00e9er 3 threads qui vont prendre cet objet en param\u00e8tre (les param\u00e8tres de la baignoire sont r\u00e9cup\u00e9r\u00e9es via les sliders) et \u00e0 l'aide de l'interface CompletionService, on va ex\u00e9cuter ces threads en diff\u00e9rer et r\u00e9cup\u00e9rer leurs r\u00e9sultats. Informations compl\u00e9mentaires : Executor : cette interface d\u00e9crit les fonctionnalit\u00e9s permettant l'\u00e9x\u00e9cution diff\u00e9r\u00e9e de t\u00e2ches impl\u00e9ment\u00e9es sous Runnable. Par exemple : Executor executor = Executors.newFixedThreadPool(3); CompletionService : permet la gestion de la r\u00e9cup\u00e9ration des r\u00e9sultats de plusieurs t\u00e2ches (threads) ex\u00e9cut\u00e9es de mani\u00e8re asynchrone. Par exemple : CompletionService pool = new ExecutorCompletionService<>(executor); submit() avec l'interface (Callable task) : ajouter la t\u00e2che dans la queue pour \u00e9x\u00e9cution. La m\u00e9thode renvoie un future qui permet d'obtenir les informations sur l'\u00e9x\u00e9cution de la t\u00e2che. Par exemple : pool.submit(new RemplissageBaignoire(this.baignoire)); remplir() (FXML) : est la fonction qui permet de modifier la quantit\u00e9 d'eau fuit\u00e9e \u00e0 l'aide du slider d\u00e9di\u00e9e dans la baignoire, si la baignoire n'est pas null et qu'elle n'est pas d\u00e9j\u00e0 pleine.La quantit\u00e9 est affich\u00e9e dans un texte \u00e0 l'aide de la m\u00e9thode setText() . vider() (FXML) : est la fonction qui permet de modifier la quantit\u00e9 d'eau vers\u00e9e \u00e0 l'aide du slider d\u00e9di\u00e9e dans la baignoire, si la baignoire n'est pas null et qu'elle n'est pas d\u00e9j\u00e0 pleine.La quantit\u00e9 est affich\u00e9e dans un texte \u00e0 l'aide de la m\u00e9thode setText() . TableauDeBord.java La classe TableauDeBord call() : est une m\u00e9thode appel\u00e9e afin d'\u00e9x\u00e9cuter une t\u00e2che asynchrone, elle retourne un r\u00e9sultat, en cas d'\u00e9chec de la t\u00e2che, elle renvoie une exception (throws Exception). Dans la classe TableauDeBord, on calcule dans la m\u00e9thode call le temps que la baignoire met \u00e0 se remplir et la barre de progression montre l'\u00e9volution du volume de l'eau dans la baignoire. convertDuree() : permet retourner la dur\u00e9e calcul\u00e9e en minutes et secondes. RemplissageBaignoire.java La classe poss\u00e8de un constructeur avec en param\u00e8tre, un objet de la classe baignoire. call () m\u00eame fonctionnement que expliquer plus haut , elle boucle tant que la baignoire ne s'est pas remplie totalement et remplira la baignoire en fonction de la quantit\u00e9 saisie avec le slider avec la m\u00e9thode remplir() de la classe Baignoire . On utilise juste avant la m\u00e9thode sleep() afin que le thread courant \"dort\" et qu'il n'utilise pas pendant la boucle while, le processeur pour ne rien faire. VidageBaignoire.java La classe poss\u00e8de un constructeur avec en param\u00e8tre, un objet de la classe baignoire. call () m\u00eame fonctionnement que expliquer plus haut , elle boucle tant que la baignoire ne s'est pas remplie totalement et videra la baignoire en fonction de la quantit\u00e9 saisie avec le slider. Afin de pouvoir mettre \u00e0 jour les r\u00e9sultats et de pouvoir les visualiser sur l'interface, on utilise la m\u00e9thode sleep() . Tant que la baignoire n'est pas pas pleine, on peut vider la baignoire en appelant la m\u00e9thode vider() de la classe Baignoire . On utilise juste avant la m\u00e9thode sleep() afin que le thread courant \"dort\" et qu'il n'utilise pas pendant la boucle while, le processeur pour ne rien faire. Baignoire.fxml Il s'agit d'une fen\u00eatre .fmxl cr\u00e9e \u00e0 partir du logiciel SceneBuilder depuis Eclipse . Les diff\u00e9rents \u00e9l\u00e9ments de l'interface : Button start : permet de lancer le remplissage de la baignoire. ProgressBar progB : barre de progression du remplissage de la baignoire. Slider vol : permet de d\u00e9finir le volume \u00e0 remplir de la baignoire. Slider vider : permet de vider la baignoire (de d\u00e9finir la quantit\u00e9 d'eau \u00e0 remplir dans la baignoire). Slider remplir : permet de remplir la baignoire (de d\u00e9finir la quantit\u00e9 d'eau \u00e0 remplir dans la baignoire). Text time : permet d'avoir le chronom\u00e8tre. Text res : permet d'avoir le chronom\u00e8tre final (message r\u00e9sultat). Text txtR : permet d'avoir la quantit\u00e9 d'eau ajout\u00e9e. Text txtV : permet d'avoir la quantit\u00e9 d'eau retir\u00e9e. Le POM XML Le pom.xml contient le mod\u00e8le objet pour ce projet. Il contient toutes les informations importantes sur ce projet. Il permet de r\u00e9f\u00e9rencer le groupId, artifactId, version, nom, description, etc. Mais \u00e9galement d'y ajouter des plugins et d\u00e9pendances pour compiler les ressources du projet permettant d'obtenir le .bat ou encore la possibilit\u00e9 de g\u00e9n\u00e9rer des archives (.zip,.rar) avec un .Jar . Dans le POM.XML, l'encondage est d\u00e9finie en UTF-8, d\u00e9fini dans properties : Dans le POM.XML, la version de Java, d\u00e9finie dans dependencies : Ce plugin permet de g\u00e9n\u00e9rer automatiquement la distribution binaire du projet, dans le dossier scripts \u00e0 la racine du projet. Cette g\u00e9n\u00e9ration est fix\u00e9e \u00e0 l'\u00e9tape package de Maven .","title":"Manuel technique"},{"location":"manuelTech.html#la-documentation-technique","text":"","title":"La documentation technique:"},{"location":"manuelTech.html#les-outils","text":"Pour ce projet j'ai travaill\u00e9 avec les outils suivants : Scene Builder :outil permettant de r\u00e9aliser des interfaces JavaFX (version 8). Eclipse : IDE pour la programmation Java (jdk 1.8_0241). Maven & les plugins n\u00e9cessaires pour g\u00e9n\u00e9rer les fichiers archives et le fichier binaire (inclus avec cette documentation). ObjeAid UML Diagramm : est un outil permettant de cr\u00e9er des diagrammes \u00e0 partir d'Eclipse.","title":"Les outils :"},{"location":"manuelTech.html#le-diagramme-de-classe","text":"","title":"Le diagramme de classe :"},{"location":"manuelTech.html#explications","text":"Dans le diagramme, il y a les relations suivantes : Les classes tableauDeBord, VidageBaignoire et RemplissageBaignoire impl\u00e9mentent l'interface Callable, Controller et Baignoire : relation associative entre les deux classes (Instance de Baignoire dans la classe Controller), VidageBaignoire et Baignoire : relation associative entre les deux classes (utilis\u00e9e dans le constructeur), RemplissageBaignoire et Baignoire : relation associative entre les deux classes (utilis\u00e9e dans le constructeur), RemplissageBaignoire et Baignoire : relation associative entre les deux classes (utilis\u00e9e l'objet de la bagnoire afin de simuler l'\u00e9tat de la baignoire), Controller et Log : relation de type use, car la classe Controller ce que contient la classe Log (Instance de Log dans la classe Controller), Relations de d\u00e9pendances entre Controller et les classes TableauDeBord, VidageBaignoire, RemplissageBaignoire.","title":"Explications"},{"location":"manuelTech.html#les-classes","text":"Pour ce TP, j'ai travaill\u00e9 avec l'interface Callable permettant de faire du multithread.","title":"Les classes :"},{"location":"manuelTech.html#appjava","text":"Cette classe est la classe principale permettant de lancer l'interface (Baignoire.fxml). Il y a deux m\u00e9thodes : start() : permettant de charger le fichier .fxml , de modifier le titre de la fen\u00eatre (setTitle()), de sp\u00e9cifier le sc\u00e8ne qui va \u00eatre utilis\u00e9 (setScene()), d'afficher la sc\u00e8ne (commande show()). La taille de la fen\u00eatre n'est pas modifiable (avec setResizable()), ceci \u00e9vitant de modifier la taille de la fen\u00eatre et l'affichage a \u00e9t\u00e9 r\u00e9alis\u00e9 de la mani\u00e8re la plus simple possible afin de pouvoir l'afficher sur tous les types d'\u00e9cran (15 pouces, 17 pouces, 19 pouces et inf\u00e9rieur). main() : qui permet de charger la fen\u00eatre avec la commande launch(args) .","title":"App.java"},{"location":"manuelTech.html#baignoirejava","text":"La classe Baignoire contient 6 param\u00e8tres : * volume (float), * qteEauTot (float), * qteVerse (float), * qteFuite (float), * semaphore (classe Semaphore), * un \u00e9l\u00e9ment log (classe Logger) pour les messages d'erreur. Diff\u00e9rence entre volume et qteEauTot, le volume est d\u00e9finie avec le premier slider, qui d\u00e9finit le volume \u00e0 atteindre afin de remplir la baignoire, en d'autre termes, il s'agit du volume d'eau de la baignoire (ex : 250L). Tandis que la qteEauTot, correspond \u00e0 la quantit\u00e9 d'eau se trouvant actuellement dans la baignoire qui varie en fonction de la quantit\u00e9 d'eau vers\u00e9e (qteVerse) et la quantit\u00e9 d'eau qui fuit (qteFuite). On y a cr\u00e9e le constructeur, les getters et setters ainsi que la m\u00e9thode toString(); estPlein() : retourne true si la baignoire est pleine, on v\u00e9rifie si la quantit\u00e9 d'eau contenue dans la baignoire est \u00e9gale au volume de la baignorie. remplir() : est une fonction qui permet de remplir la baignoire en v\u00e9rifiant si la quantit\u00e9 d'eau actuelle de la baignoire additionn\u00e9e \u00e0 la quantit\u00e9 vers\u00e9e est inf\u00e9rieure ou \u00e9gale au volume (le volume \u00e9tant la quantit\u00e9 \u00e0 atteindre pour que la baignoire soit remplie) alors on incr\u00e9mente la quantit\u00e9 d'eau. vider() : est une fonction qui permet de vider la baignoire en v\u00e9rifiant si la quantit\u00e9 d'eau actuelle de la baignoire additionn\u00e9e \u00e0 la quantit\u00e9 fuit\u00e9e est inf\u00e9rieure ou \u00e9gale \u00e0 0 (on ne peut pas avoir un volume d'eau n\u00e9gatif) alors on soustrait la quantit\u00e9 d'eau. Informations compl\u00e9mentaires : acquire() : demande une ou plusieurs autorisations. Cette m\u00e9thode est dites bloquante, c'est \u00e0 dire, qu'elle ne rend la main que lorsque le nombre d'autorisations demand\u00e9 est disponible, auquel cas, elle renvoie une exception InterruptedException si le thread est interrompu. release() : est une m\u00e9thode qui permet de rendre une autorisation. Ces deux m\u00e9thodes sont utilis\u00e9s dans les setters setVolume() , setQteVerse , setQteFuite , afin de pouvoir modifier le volume de la baignoire et les quantit\u00e9s d'eau vers\u00e9e et de fuite.","title":"Baignoire.java"},{"location":"manuelTech.html#controllerjava","text":"initialize() : est la fonction qui s'ex\u00e9cute lorsque la fen\u00e8tre FXML se cr\u00e9\u00e9e. Lors de l'initialisation, on affiche le contenu des textes time et res avec la m\u00e9thode setDisable() et on modifie le contenu avec la m\u00e9thode setText() . start(ActionEvent e) : est la fonction qui s'ex\u00e9cute lorsque l'on clique sur le bouton \"D\u00e9marrer\". On cr\u00e9e une nouvelle instance de la classe Baignoire nomm\u00e9e baignoire. \u00c0 l'aide de cette objet Baignoire, on va cr\u00e9er 3 threads qui vont prendre cet objet en param\u00e8tre (les param\u00e8tres de la baignoire sont r\u00e9cup\u00e9r\u00e9es via les sliders) et \u00e0 l'aide de l'interface CompletionService, on va ex\u00e9cuter ces threads en diff\u00e9rer et r\u00e9cup\u00e9rer leurs r\u00e9sultats. Informations compl\u00e9mentaires : Executor : cette interface d\u00e9crit les fonctionnalit\u00e9s permettant l'\u00e9x\u00e9cution diff\u00e9r\u00e9e de t\u00e2ches impl\u00e9ment\u00e9es sous Runnable. Par exemple : Executor executor = Executors.newFixedThreadPool(3); CompletionService : permet la gestion de la r\u00e9cup\u00e9ration des r\u00e9sultats de plusieurs t\u00e2ches (threads) ex\u00e9cut\u00e9es de mani\u00e8re asynchrone. Par exemple : CompletionService pool = new ExecutorCompletionService<>(executor); submit() avec l'interface (Callable task) : ajouter la t\u00e2che dans la queue pour \u00e9x\u00e9cution. La m\u00e9thode renvoie un future qui permet d'obtenir les informations sur l'\u00e9x\u00e9cution de la t\u00e2che. Par exemple : pool.submit(new RemplissageBaignoire(this.baignoire)); remplir() (FXML) : est la fonction qui permet de modifier la quantit\u00e9 d'eau fuit\u00e9e \u00e0 l'aide du slider d\u00e9di\u00e9e dans la baignoire, si la baignoire n'est pas null et qu'elle n'est pas d\u00e9j\u00e0 pleine.La quantit\u00e9 est affich\u00e9e dans un texte \u00e0 l'aide de la m\u00e9thode setText() . vider() (FXML) : est la fonction qui permet de modifier la quantit\u00e9 d'eau vers\u00e9e \u00e0 l'aide du slider d\u00e9di\u00e9e dans la baignoire, si la baignoire n'est pas null et qu'elle n'est pas d\u00e9j\u00e0 pleine.La quantit\u00e9 est affich\u00e9e dans un texte \u00e0 l'aide de la m\u00e9thode setText() .","title":"Controller.java"},{"location":"manuelTech.html#tableaudebordjava","text":"La classe TableauDeBord call() : est une m\u00e9thode appel\u00e9e afin d'\u00e9x\u00e9cuter une t\u00e2che asynchrone, elle retourne un r\u00e9sultat, en cas d'\u00e9chec de la t\u00e2che, elle renvoie une exception (throws Exception). Dans la classe TableauDeBord, on calcule dans la m\u00e9thode call le temps que la baignoire met \u00e0 se remplir et la barre de progression montre l'\u00e9volution du volume de l'eau dans la baignoire. convertDuree() : permet retourner la dur\u00e9e calcul\u00e9e en minutes et secondes.","title":"TableauDeBord.java"},{"location":"manuelTech.html#remplissagebaignoirejava","text":"La classe poss\u00e8de un constructeur avec en param\u00e8tre, un objet de la classe baignoire. call () m\u00eame fonctionnement que expliquer plus haut , elle boucle tant que la baignoire ne s'est pas remplie totalement et remplira la baignoire en fonction de la quantit\u00e9 saisie avec le slider avec la m\u00e9thode remplir() de la classe Baignoire . On utilise juste avant la m\u00e9thode sleep() afin que le thread courant \"dort\" et qu'il n'utilise pas pendant la boucle while, le processeur pour ne rien faire.","title":"RemplissageBaignoire.java"},{"location":"manuelTech.html#vidagebaignoirejava","text":"La classe poss\u00e8de un constructeur avec en param\u00e8tre, un objet de la classe baignoire. call () m\u00eame fonctionnement que expliquer plus haut , elle boucle tant que la baignoire ne s'est pas remplie totalement et videra la baignoire en fonction de la quantit\u00e9 saisie avec le slider. Afin de pouvoir mettre \u00e0 jour les r\u00e9sultats et de pouvoir les visualiser sur l'interface, on utilise la m\u00e9thode sleep() . Tant que la baignoire n'est pas pas pleine, on peut vider la baignoire en appelant la m\u00e9thode vider() de la classe Baignoire . On utilise juste avant la m\u00e9thode sleep() afin que le thread courant \"dort\" et qu'il n'utilise pas pendant la boucle while, le processeur pour ne rien faire.","title":"VidageBaignoire.java"},{"location":"manuelTech.html#baignoirefxml","text":"Il s'agit d'une fen\u00eatre .fmxl cr\u00e9e \u00e0 partir du logiciel SceneBuilder depuis Eclipse . Les diff\u00e9rents \u00e9l\u00e9ments de l'interface : Button start : permet de lancer le remplissage de la baignoire. ProgressBar progB : barre de progression du remplissage de la baignoire. Slider vol : permet de d\u00e9finir le volume \u00e0 remplir de la baignoire. Slider vider : permet de vider la baignoire (de d\u00e9finir la quantit\u00e9 d'eau \u00e0 remplir dans la baignoire). Slider remplir : permet de remplir la baignoire (de d\u00e9finir la quantit\u00e9 d'eau \u00e0 remplir dans la baignoire). Text time : permet d'avoir le chronom\u00e8tre. Text res : permet d'avoir le chronom\u00e8tre final (message r\u00e9sultat). Text txtR : permet d'avoir la quantit\u00e9 d'eau ajout\u00e9e. Text txtV : permet d'avoir la quantit\u00e9 d'eau retir\u00e9e.","title":"Baignoire.fxml"},{"location":"manuelTech.html#le-pom-xml","text":"Le pom.xml contient le mod\u00e8le objet pour ce projet. Il contient toutes les informations importantes sur ce projet. Il permet de r\u00e9f\u00e9rencer le groupId, artifactId, version, nom, description, etc. Mais \u00e9galement d'y ajouter des plugins et d\u00e9pendances pour compiler les ressources du projet permettant d'obtenir le .bat ou encore la possibilit\u00e9 de g\u00e9n\u00e9rer des archives (.zip,.rar) avec un .Jar . Dans le POM.XML, l'encondage est d\u00e9finie en UTF-8, d\u00e9fini dans properties : Dans le POM.XML, la version de Java, d\u00e9finie dans dependencies : Ce plugin permet de g\u00e9n\u00e9rer automatiquement la distribution binaire du projet, dans le dossier scripts \u00e0 la racine du projet. Cette g\u00e9n\u00e9ration est fix\u00e9e \u00e0 l'\u00e9tape package de Maven .","title":"Le POM XML"},{"location":"manuelUt.html","text":"Liste des Fonctionnalit\u00e9s Interface de la baignoire 1) R\u00e9gler le volume totale de la baignoire : Le premier slider (barre gradu\u00e9e) permet de d\u00e9finir le volume initiale contenu dans la baignoire. 2) Lancement du test : Vous pouvez choisir d'initier le taux de fuite et le taux de remplissage avant de cliquer sur le bouton d\u00e9marrer (possible apr\u00e8s). Jauge de remplissage : Jauge de vidage : Et c'est parti ! Une fois que vous avez cliqu\u00e9 sur le bouton \"D\u00e9marrer\", celui ci ainsi que la barre de progression (progressBar) du volume totale ne sont plus modifiables. Vous pouvez vous amusez \u00e0 r\u00e9gler le d\u00e9bit d'eau entrant (remplissage) et le d\u00e9bit d'eau qui en fuit (vidage) dans la baignoire. Lorsque vous commencez, un message vous indique que votre baignoire est vide et lorsque vous cliquez sur D\u00e9marrer , un chronom\u00e8tre appara\u00eet. En fonction de comment vous dosez, le nombre de secondes augmentera, tandis que si vous ne saisissez pas de volume d'eau fuit\u00e9e, vous aurez une baignoire qui se remplira en un \u00e9clair ! Un fois termin\u00e9e, vous aurez un message pour vous indiquer en combien de minutes et de secondes la baignoire s'est remplie. Vous pouvez alors r\u00e9essayer avec un autre volume, car le bouton D\u00e9marrer et le Slider pour le volume de la baignoire ne sont plus gris\u00e9es une fois la manipulation termin\u00e9e. Exemple : Remarque : vous pouvez voir la quantit\u00e9 d'eau de Fuite et de Remplissage qui sont affich\u00e9s Quantit\u00e9 de fuite d'eau dans la baignoire : Quantit\u00e9 de remplissage d'eau dans la baignoire :","title":"Manuel d'utilisiation"},{"location":"manuelUt.html#liste-des-fonctionnalites","text":"","title":"Liste des Fonctionnalit\u00e9s"},{"location":"manuelUt.html#interface-de-la-baignoire","text":"","title":"Interface de la baignoire"},{"location":"manuelUt.html#1-regler-le-volume-totale-de-la-baignoire","text":"Le premier slider (barre gradu\u00e9e) permet de d\u00e9finir le volume initiale contenu dans la baignoire.","title":"1) R\u00e9gler le volume totale de la baignoire :"},{"location":"manuelUt.html#2-lancement-du-test","text":"Vous pouvez choisir d'initier le taux de fuite et le taux de remplissage avant de cliquer sur le bouton d\u00e9marrer (possible apr\u00e8s).","title":"2) Lancement du test :"},{"location":"manuelUt.html#jauge-de-remplissage","text":"","title":"Jauge de remplissage :"},{"location":"manuelUt.html#jauge-de-vidage","text":"","title":"Jauge de vidage :"},{"location":"manuelUt.html#et-cest-parti","text":"Une fois que vous avez cliqu\u00e9 sur le bouton \"D\u00e9marrer\", celui ci ainsi que la barre de progression (progressBar) du volume totale ne sont plus modifiables. Vous pouvez vous amusez \u00e0 r\u00e9gler le d\u00e9bit d'eau entrant (remplissage) et le d\u00e9bit d'eau qui en fuit (vidage) dans la baignoire. Lorsque vous commencez, un message vous indique que votre baignoire est vide et lorsque vous cliquez sur D\u00e9marrer , un chronom\u00e8tre appara\u00eet. En fonction de comment vous dosez, le nombre de secondes augmentera, tandis que si vous ne saisissez pas de volume d'eau fuit\u00e9e, vous aurez une baignoire qui se remplira en un \u00e9clair ! Un fois termin\u00e9e, vous aurez un message pour vous indiquer en combien de minutes et de secondes la baignoire s'est remplie. Vous pouvez alors r\u00e9essayer avec un autre volume, car le bouton D\u00e9marrer et le Slider pour le volume de la baignoire ne sont plus gris\u00e9es une fois la manipulation termin\u00e9e.","title":"Et c'est parti !"},{"location":"manuelUt.html#exemple","text":"Remarque : vous pouvez voir la quantit\u00e9 d'eau de Fuite et de Remplissage qui sont affich\u00e9s","title":"Exemple :"},{"location":"manuelUt.html#quantite-de-fuite-deau-dans-la-baignoire","text":"","title":"Quantit\u00e9 de fuite d'eau dans la baignoire :"},{"location":"manuelUt.html#quantite-de-remplissage-deau-dans-la-baignoire","text":"","title":"Quantit\u00e9 de remplissage d'eau dans la baignoire :"},{"location":"tests.html","text":"Les tests unitaires n'ont pas encore \u00e9t\u00e9 abord\u00e9s durant le Master MIAGE \u00e0 ce jour.","title":"Tests"}]}